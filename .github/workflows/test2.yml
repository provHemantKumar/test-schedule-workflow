---
name: Scheduled pod rollout

"on":
#   schedule:
#     - cron:  '0 11 * * *' # At every day 4:30PM IST [11AM UTC]
  workflow_dispatch: 
    inputs:
      tier:
        description: 'Select the tier to rollout the pod.'
        required: true
        type: choice
        options:
          - dev
          - uat
          - prod
        default: 'dev'
env:
  # Define a default tier to be used when the workflow is executed on a schedule.
  DEFAULT_TIER: 'prod'
  NAMESPACE: spi-pims-service

jobs:

  get-environment:
    runs-on: ['ubuntu-20.04']
    outputs:
      environment_name: ${{ steps.get_environment.outputs.environment_name }}
    steps:
      - id: get_environment
        run: |
          if [ '${{ inputs.tier }}' == 'dev' ]
          then
            echo "::set-output name=environment_name::test"
          elif [ '${{ inputs.tier }}' == 'uat' ]
          then
            echo "::set-output name=environment_name::qa"
          elif [ '${{ inputs.tier }}' == 'prod' ]
          then
            echo "::set-output name=environment_name::production"
          fi
          
  cluster-states:
    name: Resolve cluster labels
    runs-on: ['ubuntu-20.04']
    needs: [get-environment]
    
    steps:
      - uses: actions/checkout@v3
      - name: launder tier var
        # Values from the env context can't be used in runs-on directives. Outputs can be.
        id: launder-tier-var
        run: |
          config_version=${{ steps.get-environment.outputs.environment_name }}
          echo "${config_version}"
          echo "tier=${{ inputs.tier || env.DEFAULT_TIER }}" >> $GITHUB_OUTPUT
          #PROFILE_NAME="spi-${{ steps.get-environment.outputs.environment_name }}-cdn"
          ENDPOINT=${PROFILE_NAME}.azureedge.net
          GROUP="${{ secrets.RESOURCE_GROUP }}"
          echo "az cdn endpoint purge -g ${GROUP} -n ${ENDPOINT} --profile-name ${PROFILE_NAME} --content-paths '/*'"

    outputs:
      tier: ${{ steps.launder-tier-var.outputs.tier }} 
  
  replace-pims-pods:
    name: "Replace PIMS pods in ${{ needs.cluster-states.outputs.tier }}"
    needs: [cluster-states]
    strategy:
      matrix:
        color: ${{ fromJSON(vars.COLOR_ARRAY) }}
    runs-on: ["ubuntu-20.04", "${{ needs.cluster-states.outputs.tier }}", "${{ matrix.color }}"]
    steps:
      - name: Restart
        run: |
          echo Restarting PIMS pods, ${{ needs.cluster-states.outputs.tier }} tier, "${{ matrix.color }}" color 
          kubectl rollout restart -n $NAMESPACE deployment/patient-identity-management-service
          echo "Restarted"
